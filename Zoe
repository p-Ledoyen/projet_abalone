#include <stdio.h>
#include <math.h>
		   
typedef enum {free,p1,p2,gutter,wall,prohibited} CASE;
typedef enum {left,right,up_left,up_right,down_left,down_right} DEPLACEMENT;
typedef enum {player1,player2} TURN;
typedef struct {int x,y;} COORD;




//Tableau vide
/*CASE T[11][21]={{5,5,5,5,5,3,5,3,5,3,5,3,5,3,5,3,5,5,5,5,5},
				{5,5,5,5,3,5,0,5,0,5,0,5,0,5,0,5,3,5,5,5,5},
				{5,5,5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5,5,5},
				{5,5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5,5},
				{5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5},
				{3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3},
				{5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5},
				{5,5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5,5},
				{5,5,5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5,5,5},
				{5,5,5,5,3,5,0,5,0,5,0,5,0,5,0,5,3,5,5,5,5},
				{5,5,5,5,5,3,5,3,5,3,5,3,5,3,5,3,5,5,5,5,5}};*/
				
//Entr√©e standard
/*CASE T[11][21]={{5,5,5,5,5,3,5,3,5,3,5,3,5,3,5,3,5,5,5,5,5},
				{5,5,5,5,3,5,1,5,1,5,1,5,1,5,1,5,3,5,5,5,5},
				{5,5,5,3,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,5,5},
				{5,5,3,5,0,5,0,5,1,5,1,5,1,5,0,5,0,5,3,5,5},
				{5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5},
				{3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3},
				{5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5},
				{5,5,3,5,0,5,0,5,2,5,2,5,2,5,0,5,0,5,3,5,5},
				{5,5,5,3,5,2,5,2,5,2,5,2,5,2,5,2,5,3,5,5,5},
				{5,5,5,5,3,5,2,5,2,5,2,5,2,5,2,5,3,5,5,5,5},
				{5,5,5,5,5,3,5,3,5,3,5,3,5,3,5,3,5,5,5,5,5}};*/			
	
//Entree test			
CASE T[11][21]={{5,5,5,5,5,3,5,3,5,3,5,3,5,3,5,3,5,5,5,5,5},
				{5,5,5,5,3,5,0,5,0,5,0,5,0,5,0,5,3,5,5,5,5},
				{5,5,5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5,5,5},
				{5,5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5,5},
				{5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5},
				{3,5,0,5,0,5,0,5,0,5,1,5,1,5,0,5,0,5,0,5,3},
				{5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5},
				{5,5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5,5},
				{5,5,5,3,5,0,5,0,5,0,5,0,5,0,5,0,5,3,5,5,5},
				{5,5,5,5,3,5,0,5,0,5,0,5,0,5,0,5,3,5,5,5,5},
				{5,5,5,5,5,3,5,3,5,3,5,3,5,3,5,3,5,5,5,5,5}};
					
		

TURN player=player1;

//Mouvements 1 pion
void move_left_1 (COORD p1)
{
	T[p1.x][p1.y-2]=T[p1.x][p1.y];
	T[p1.x][p1.y]=0;
}

void move_right_1 (COORD p1)
{
	T[p1.x][p1.y+2]=T[p1.x][p1.y];
	T[p1.x][p1.y]=0;
	//change_player(TURN player);
}

void move_up_left_1 (COORD p1)
{
	T[p1.x-1][p1.y-1]=T[p1.x][p1.y];
	T[p1.x][p1.y]=0;
}

void move_up_right_1 (COORD p1)	
{			      
	T[p1.x-1][p1.y+1]=T[p1.x][p1.y];
	T[p1.x][p1.y]=0;
}

void move_down_left_1 (COORD p1)
{
	T[p1.x+1][p1.y-1]=T[p1.x][p1.y];
	T[p1.x][p1.y]=0;
}

void move_down_right_1 (COORD p1)
{
	T[p1.x+1][p1.y+1]=T[p1.x][p1.y];
	T[p1.x][p1.y]=0;
}

//Mouvement 2 pions
void move_left_2 (COORD p1,COORD p2)
{
	if (p2.y < p1.y)
	{
		int x,y;
		x=p1.x; 	y=p1.y;
		p1.x=p2.x;  p1.y=p2.y;
		p2.x=p1.x;  p2.y=p1.y;
	}
	if (T[p1.x][p1.y-4] == gutter)
	{
		if (T[p1.x][p1.y-2] != free)
		{
			//score++;
		}
		T[p1.x][p1.y-2]=T[p1.x][p1.y];
		T[p1.x][p1.y]=T[p2.x][p2.y];
		T[p2.x][p2.y]=0;
	}
	else 
	{
		T[p1.x][p1.y-4]=T[p1.x][p1.y-2];
		T[p1.x][p1.y-2]=T[p1.x][p1.y];
		T[p1.x][p1.y]=T[p2.x][p2.y];
		T[p2.x][p2.y]=0;
	}
}




void affiche()
{
	int l,c;
	for (l=0;l<=10;l++)
	{
		for (c=0;c<=20;c++)
		{
			if (T[l][c]==free) printf(".");
			else if (T[l][c]==p1) printf("1");
			else if(T[l][c]==p2) printf("2");
			else if(T[l][c]==gutter) printf(" ");
			else if(T[l][c]==prohibited) printf(" ");
		}
		printf("\n");
	}
}

int main ()
{
	COORD p1,p2;
	p1.x=5; p1.y=10;
	p2.x=5; p2.y=12; 
	affiche();
	move_left_2(p1,p2);
	affiche();
	return 0;	
}
